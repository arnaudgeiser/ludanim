(ns ludexploit-cj.data-access
	(:require [clojure.java.jdbc :as j]
						[clojure.set :refer :all]
						[php_clj.core :refer [php->clj clj->php]]
						[ludexploit-cj.config :refer [config]]))

(def mysql-db (:db config))

(defn has-booking-meta? [event] (not (empty? (:booking_meta event))))

(defn convert-booking-meta [event]
	(if (has-booking-meta? event) (php->clj (:booking_meta event)) {} ))

(defn booking-meta-to-attendees [booking-meta]
    (let [attendees (flatten (vals (get booking-meta "attendees")))]
    (map #(get % "attendee_name") attendees)))

(defn booking-meta-to-username [booking-meta]
    (let [registration (get booking-meta "registration")]
    (get registration "user_name")))

(defn booking-meta-to-email [booking-meta]
  (let [registration (get booking-meta "registration")]
    (get registration "user_email")))

(defn booking-meta-to-data [booking-meta]
  (do {:username (booking-meta-to-username booking-meta)
   ;:user_email (booking-meta-to-email booking-meta)
   :attendees (booking-meta-to-attendees booking-meta)}))

(defn convert-booking-meta-from-event [event]
  (->> event
    (convert-booking-meta)
    (booking-meta-to-data)
    (merge event)))

(defn convert-booking-meta-from-events [events]
  (map convert-booking-meta-from-event events))

(defn readable-events [events]
  (->> events
    (map #(assoc % :hasinscriptions (= (:meta_value %) "1")))
    (convert-booking-meta-from-events)))

(defn grouped [events]
    (for [e (group-by #(select-keys % [:id :event_end_date  :event_start_date :event_name :ticket_spaces :meta_value :hasinscriptions]) events)
        :let [has-attendees (not (empty? (flatten (map #(:attendees %) (val e)))))
              more {:reservations (map #(assoc {} :attendees (:attendees %) :user_email (:user_email %) :username (:username %) :id (:booking_id %)) (val e))}]]
        (if has-attendees (merge (key e) more) (assoc (key e) :reservations []))))

(defn search-events-by-festival [idFestival]
	(-> (j/query mysql-db ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces ,meta_value, booking_meta, user_email
										from wp_em_events
										join wp_posts on wp_posts.id=wp_em_events.post_id
										join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
										left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
										left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
										left outer join wp_users on wp_em_bookings.person_id=wp_users.id
										join (select distinct wp_em_events.event_id from wp_em_events
													join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
													left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
													join wp_postmeta on wp_postmeta.post_id=wp_em_events.post_id
													join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id
													where wp_postmeta.meta_value=? and wp_postmeta.meta_key='festival_id') b
										on b.event_id=wp_em_events.event_id
										order by event_name" idFestival])
		(readable-events)
		(grouped)))

(defn search-events []
  (-> (j/query mysql-db ["select wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces,meta_value, booking_meta, user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    order by event_name"])
		(readable-events)
		(grouped)))

(defn search-events-by-date [date]
  (-> (j/query mysql-db ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces,meta_value, booking_meta, user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    where event_start_date>=? and event_start_date<=?
                    order by event_name" date date])
										(readable-events)
										(grouped)))

(defn search-event [idEvent]
  (-> (j/query mysql-db ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces ,meta_value, booking_meta, user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    where wp_em_events.event_id=?
                    order by event_name" idEvent])
				(readable-events)
				(grouped)))

(defn search-event-raw [idEvent]
	(->> (j/query mysql-db ["select  wp_em_events.event_id as id, wp_em_bookings.booking_id, event_name ,event_start_date ,event_end_date ,event_spaces ,ticket_spaces ,meta_value, booking_meta, user_email
                    from wp_em_events
                    join wp_posts on wp_posts.id=wp_em_events.post_id
                    join wp_em_tickets on wp_em_tickets.event_id=wp_em_events.event_id
                    left join wp_em_bookings on wp_em_events.event_id=wp_em_bookings.event_id
                    left outer join wp_postmeta as insmeta on insmeta.post_id=wp_posts.id and insmeta.meta_key='inscription_mode'
                    left outer join wp_users on wp_em_bookings.person_id=wp_users.id
                    join (select distinct wp_em_events.event_id from wp_em_events
                          join wp_em_tickets on wp_em_events.event_id=wp_em_tickets.event_id
                          left outer join wp_em_locations on wp_em_events.location_id=wp_em_locations.location_id
                          join wp_postmeta as meta2 on meta2.post_id=wp_em_events.post_id) b
                    on b.event_id=wp_em_events.event_id
                    where wp_em_events.event_id=?
                    order by event_name" idEvent])
				(first)
				(convert-booking-meta)))

(defn delete-reservation [idReservation]
	(j/execute! mysql-db ["delete from wp_em_bookings where booking_id=?" idReservation]))

(defn convert-to-booking-meta [reservation]
	(let [attendees [{"attendee_name" (:name reservation)}]
				booking-meta {"attendees" {"1" attendees}}]
				(clj->php booking-meta)))

(defn create-reservation [{:keys [reservation event_id]}]
	(let [current-date (java.util.Date.)
			 booking-meta (convert-to-booking-meta reservation)]
		(j/execute! mysql-db ["insert into wp_em_bookings
													(event_id, person_id, booking_spaces, booking_date, booking_status, booking_meta)
													values
													(?,0,1,?,1,?)" event_id current-date booking-meta])))


(defn festivals-to-domain [festivals]
		(map #(rename-keys % {:post_title :name}) festivals))

(defn search-festivals []
		(-> (j/query mysql-db "select post_title, ID from wp_posts where post_type='festival'and post_status='publish'")
		(festivals-to-domain)))
